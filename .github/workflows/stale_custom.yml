name: Stale Issue Management

on:
  schedule:
    - cron: '0 0 * * *'

jobs:
  stale:
    runs-on: ubuntu-latest

    steps:
    - name: Check for Stale Issues
      uses: actions/bin/filter@v1
      with:
        args: issue-list
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Mark Stale Issues
      uses: actions/github-script@v6.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: steps.check-for-stale-issues.outputs.result
      id: mark-stale-issues
      run: |
        const issues = JSON.parse(steps.check-for-stale-issues.outputs.result);
        if (issues.length === 0) {
          console.log("No open issues found. Skipping job.");
        } else {
          const daysUntilStale = 1; # testing 
          const daysUntilClose = 2; # testing 
          const exemptLabels = ["pinned", "security"];
          const staleLabel = "wontfix";
          const markComment = "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.";
          const closeComment = false;

          for (const issue of issues) {
            const updatedAt = new Date(issue.updated_at);
            const now = new Date();
            const daysSinceLastUpdate = (now - updatedAt) / (1000 * 60 * 60 * 24);

            if (daysSinceLastUpdate >= daysUntilStale) {
              const hasExemptLabel = issue.labels.some(label => exemptLabels.includes(label.name));

              if (!hasExemptLabel) {
                const issueNumber = issue.number;

                // Mark the issue as stale
                await github.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: [staleLabel]
                });

                if (markComment) {
                  await github.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    body: markComment
                  });
                }

                if (daysSinceLastUpdate >= daysUntilClose && closeComment) {
                  // Close the issue
                  await github.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    state: "closed"
                  });

                  await github.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    body: closeComment
                  });
                }
              }
            }
          }
        }
